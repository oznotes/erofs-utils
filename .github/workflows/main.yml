name: Build erofs-utils-windows
on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:
    inputs:
      release:
        description: 'Push a new release'
        required: false
        default: 'false'
      version:
        description: 'Version'
        required: false
        default: ''

jobs:
  build-windows:
    runs-on: ubuntu-latest
    env:
      TZ: UTC-8
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_BASEDIR: "${{ github.workspace }}"
      OUT_DIR: "build"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install MinGW and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mingw-w64 \
            ninja-build \
            ccache \
            cmake \
            wget \
            zip

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-mingw
          restore-keys: ${{ runner.os }}-mingw

      - name: Get version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION="v$(. scripts/get-version-number)"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Build erofs-utils
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TARGET_NAME="erofs-utils-${VERSION}-Windows_x86_64-$(TZ=UTC-8 date +%y%m%d%H%M)"
          TARGET_DIR="target/Windows_x86_64/${TARGET_NAME}"
          
          # Create output directories
          rm -rf ${OUT_DIR} > /dev/null 2>&1
          mkdir -p ${OUT_DIR}
          mkdir -p ${TARGET_DIR}
          
          # Ensure CMakeLists.txt exists in the root directory
          if [ ! -f "CMakeLists.txt" ]; then
            echo "Error: CMakeLists.txt not found in root directory"
            exit 1
          fi
          
          # Build using MinGW64
          cmake -B ${OUT_DIR} \
            -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSTEM_PROCESSOR=x86_64 \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_FIND_ROOT_PATH=/usr/x86_64-w64-mingw32 \
            -DENABLE_FULL_LTO=ON \
            -DMAX_BLOCK_SIZE=4096
          
          # Build with ninja
          time -p ninja -C ${OUT_DIR}
          
          # Check and copy built files
          # Check and copy built files
          for binary in fsck.erofs mkfs.erofs dump.erofs erofsfuse; do
            if [ ! -f "${OUT_DIR}/${binary}.exe" ]; then
              echo "Error: ${binary}.exe not found"
              exit 1
            fi
            cp -af "${OUT_DIR}/${binary}.exe" "${TARGET_DIR}/"
          done
          
          # Copy required MinGW DLLs
          cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll "${TARGET_DIR}/"
          cp /usr/lib/gcc/x86_64-w64-mingw32/*/libgcc_s_seh-1.dll "${TARGET_DIR}/"
          cp /usr/lib/gcc/x86_64-w64-mingw32/*/libstdc++-6.dll "${TARGET_DIR}/"

          # Download and copy LZ4 and ZLIB DLLs
          wget -q https://github.com/lz4/lz4/releases/download/v1.9.4/lz4_win64_v1_9_4.zip
          unzip -j lz4_win64_v1_9_4.zip dll/liblz4.dll -d "${TARGET_DIR}"
          wget -q https://github.com/madler/zlib/releases/download/v1.3/zlib13.zip
          unzip -j zlib13.zip zlib1.dll -d "${TARGET_DIR}"
          
          # Set file timestamps
          touch -c -d "2009-01-01 00:00:00" ${TARGET_DIR}/*
          echo "Build successful: ${TARGET_NAME}"

      - name: Prepare artifact
        if: success()
        id: Artifact
        run: |
          echo "windowsX86x64Dir=target/Windows_x86_64" >> $GITHUB_OUTPUT
          windowsX86x64Name=`ls -d target/Windows_x86_64/erofs-utils-v*/ | awk -F '(/|.zip)' '{print $3}'` && echo "windowsX86x64Name=$windowsX86x64Name" >> $GITHUB_OUTPUT

      - name: Upload erofs-utils Windows_x86_64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.windowsX86x64Name }}
          path: '${{ steps.Artifact.outputs.windowsX86x64Dir }}/${{ steps.Artifact.outputs.windowsX86x64Name }}/*'

  release:
    needs: [ build-windows ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event.inputs.release == 'true'
    steps:
      - uses: actions/download-artifact@v4

      - name: Version
        run: |
          ARTIFACT_DIR=$(ls)
          for name in ${ARTIFACT_DIR}; do
            chmod +x ${name}/*
            touch -c -d "2009-01-01 00:00:00" ${name}/*
            zip -9 -jy "${name}.zip" ${name}/* > /dev/null 2>&1
          done
          ls -lahR

      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          removeArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.version.outputs.version }}
          tag: ${{ steps.version.outputs.version }}
          body: This release is built by github-action.
          artifacts: "*.zip"